// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVARY
  DELIVERED
  CANCELLED
}

model User {
  id                       String   @id @default(uuid())
  name                     String
  email                    String   @unique
  password                 String
  role                     UserRole @default(USER)
  isVerified               Boolean  @default(false)
  verificationToken        String?
  verificationTokenExpiray DateTime
  passwordResetToken       String?
  passwordResetExpiry      String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  bookreview Bookreview[]

  orders   Order[]
  cartItem CartItem[]

  address Address[]
}

model Address {
  id      Int     @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city    String
  country String
  userId  String

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order[]
}

model Book {
  id          String   @id @unique @default(uuid())
  name        String
  author      String
  title       String
  description String?
  price       Int
  publish     DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookreview Bookreview[]
  cartItem   CartItem[]

  orders OrderProduct[]
}

model Bookreview {
  id     String @id @unique @default(uuid())
  review String
  userId String
  bookId String
  rating Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model CartItem {
  id       String @id @unique @default(uuid())
  bookId   String
  userId   String
  quantity Int

  user User @relation(fields: [userId], references: [id])

  Book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String  @id @unique @default(uuid())
  userId    String
  netAmount Decimal
  addressId Int

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Address   Address  @relation(fields: [addressId], references: [id])

  orderProduct OrderProduct[]

  events OrderEvent[]
}

model OrderProduct {
  id        String @id @unique @default(uuid())
  orderId   String
  quantity Int

  bookId String

  book Book @relation(fields: [bookId], references: [id])

  order Order @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderEvent {
  id      String @id @unique @default(uuid())
  orderId String

  status OrderEventStatus @default(PENDING)

  order Order @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
